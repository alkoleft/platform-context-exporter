package ru.alkoleft.context.platform.mcp;

import org.springframework.stereotype.Service;
import ru.alkoleft.context.platform.dto.ISignature;
import ru.alkoleft.context.platform.dto.MethodDefinition;
import ru.alkoleft.context.platform.dto.PlatformTypeDefinition;
import ru.alkoleft.context.platform.dto.PropertyDefinition;

import java.util.List;
import java.util.stream.Collectors;

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ Markdown –¥–ª—è MCP
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å DTO –æ–±—ä–µ–∫—Ç–∞–º–∏ –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–ª–æ–µ–≤
 */
@Service
public class MarkdownFormatterService {

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–∑ DTO –æ–±—ä–µ–∫—Ç–æ–≤
     */
    public String formatSearchResults(String query, List<Object> results) {
        if (results.isEmpty()) {
            return String.format("‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** `%s`\n\n" +
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n" +
                    "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n" +
                    "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å\n" +
                    "- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã", query);
        }

        StringBuilder sb = new StringBuilder();

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sb.append(String.format("# üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"%s\" (%d –Ω–∞–π–¥–µ–Ω–æ)\n\n", query, results.size()));

        // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (results.size() == 1) {
            // –û–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            sb.append(formatSingleObject(results.get(0)));
        } else if (results.size() <= 5) {
            // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ
            for (int i = 0; i < results.size(); i++) {
                Object result = results.get(i);
                sb.append(formatCompactObject(result, i == 0));
                if (i < results.size() - 1) {
                    sb.append("\n---\n\n");
                }
            }
        } else {
            // –ú–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–æ–ø-5
            sb.append("## –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n");
            sb.append("| –ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø | –°–∏–≥–Ω–∞—Ç—É—Ä–∞ |\n");
            sb.append("|----------|-----|-----------|");

            for (int i = 0; i < Math.min(5, results.size()); i++) {
                Object result = results.get(i);
                sb.append(String.format("| **%s** | %s | `%s` |\n",
                        getObjectName(result),
                        getObjectTypeIcon(result),
                        truncateSignature(getObjectSignature(result), 40)));
            }

            if (results.size() > 5) {
                sb.append(String.format("\n*... –∏ –µ—â–µ %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n", results.size() - 5));
            }

            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            sb.append("\n---\n\n");
            sb.append("## ‚≠ê –ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n");
            sb.append(formatSingleObject(results.get(0)));
        }

        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ DTO
     */
    public String formatDetailedInfo(Object obj) {
        if (obj instanceof MethodDefinition) {
            return formatMethodDefinition((MethodDefinition) obj);
        } else if (obj instanceof PropertyDefinition) {
            return formatPropertyDefinition((PropertyDefinition) obj);
        } else if (obj instanceof PlatformTypeDefinition) {
            return formatPlatformTypeDefinition((PlatformTypeDefinition) obj);
        }
        
        return "‚ùå **–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞**";
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ —Ç–∏–ø–∞
     */
    public String formatConstructors(List<ISignature> constructors, String typeName) {
        StringBuilder sb = new StringBuilder();
        
        sb.append(String.format("# üî® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã —Ç–∏–ø–∞ %s (%d –Ω–∞–π–¥–µ–Ω–æ)\n\n", typeName, constructors.size()));
        
        for (int i = 0; i < constructors.size(); i++) {
            ISignature constructor = constructors.get(i);
            sb.append(String.format("## –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä %d\n", i + 1));
            sb.append("```bsl\n");
            sb.append(String.format("–ù–æ–≤—ã–π %s(%s)\n", typeName, 
                    constructor.params().stream()
                            .map(param -> param.name() + ": " + param.type())
                            .collect(Collectors.joining(", "))));
            sb.append("```\n\n");
            
            if (constructor.description() != null && !constructor.description().isEmpty()) {
                sb.append("**–û–ø–∏—Å–∞–Ω–∏–µ:** ").append(constructor.description()).append("\n\n");
            }
            
            if (!constructor.params().isEmpty()) {
                sb.append("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n");
                constructor.params().forEach(param -> {
                    sb.append(String.format("- **%s** *(%s)* - %s\n",
                            param.name(),
                            param.type(),
                            param.description() != null ? param.description() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"));
                });
                sb.append("\n");
            }
        }
        
        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Ç–∏–ø–∞
     */
    public String formatTypeMembers(PlatformTypeDefinition type) {
        StringBuilder sb = new StringBuilder();
        
        sb.append(String.format("# üì¶ –ß–ª–µ–Ω—ã —Ç–∏–ø–∞ %s\n\n", type.name()));
        
        // –ú–µ—Ç–æ–¥—ã
        if (!type.methods().isEmpty()) {
            sb.append(String.format("## üîß –ú–µ—Ç–æ–¥—ã (%d)\n\n", type.methods().size()));
            for (MethodDefinition method : type.methods()) {
                sb.append(String.format("- **%s** - %s\n", 
                        method.name(),
                        method.description() != null ? method.description() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"));
            }
            sb.append("\n");
        }
        
        // –°–≤–æ–π—Å—Ç–≤–∞
        if (!type.properties().isEmpty()) {
            sb.append(String.format("## üìã –°–≤–æ–π—Å—Ç–≤–∞ (%d)\n\n", type.properties().size()));
            for (PropertyDefinition property : type.properties()) {
                sb.append(String.format("- **%s** *(%s)* - %s\n", 
                        property.name(),
                        property.type(),
                        property.description() != null ? property.description() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"));
            }
            sb.append("\n");
        }
        
        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
        if (!type.constructors().isEmpty()) {
            sb.append(String.format("## üî® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã (%d)\n\n", type.constructors().size()));
            sb.append("*–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ getConstructors*\n\n");
        }
        
        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞
     */
    private String formatMethodDefinition(MethodDefinition method) {
        StringBuilder sb = new StringBuilder();

        sb.append(String.format("# üîß %s\n\n", method.name()));

        // –°–∏–≥–Ω–∞—Ç—É—Ä–∞
        sb.append("## –°–∏–≥–Ω–∞—Ç—É—Ä–∞\n");
        sb.append("```bsl\n");
        sb.append(buildMethodSignature(method)).append("\n");
        sb.append("```\n\n");

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (method.signature() != null && !method.signature().isEmpty()) {
            sb.append("## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã\n");
            method.signature().forEach(param -> {
                sb.append(String.format("- **%s** *(%s)* - %s\n",
                        param.name(),
                        param.getType(),
                        param.description() != null ? param.description() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"));
            });
            sb.append("\n");
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (method.getReturnTypeDefinition() != null) {
            sb.append("## –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n");
            sb.append(String.format("**%s** - %s\n\n",
                    method.getReturnTypeDefinition().getType(),
                    method.getReturnTypeDefinition().getDescription() != null ?
                            method.getReturnTypeDefinition().getDescription() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"));
        }

        // –û–ø–∏—Å–∞–Ω–∏–µ
        if (method.description() != null && !method.description().isEmpty()) {
            sb.append("## –û–ø–∏—Å–∞–Ω–∏–µ\n");
            sb.append(method.description()).append("\n\n");
        }

        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞
     */
    private String formatPropertyDefinition(PropertyDefinition property) {
        StringBuilder sb = new StringBuilder();

        sb.append(String.format("# üìã %s\n\n", property.name()));

        // –¢–∏–ø
        sb.append("## –¢–∏–ø\n");
        sb.append("```bsl\n");
        sb.append(String.format("%s: %s", property.name(), property.type()));
        sb.append("```\n\n");

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–π—Å—Ç–≤–µ
        sb.append("## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–π—Å—Ç–≤–µ\n");
        sb.append(String.format("- **–¢–∏–ø:** %s\n", property.type()));
        sb.append(String.format("- **–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ:** %s\n", property.readonly() ? "–î–∞" : "–ù–µ—Ç"));
        sb.append("\n");

        // –û–ø–∏—Å–∞–Ω–∏–µ
        if (property.description() != null && !property.description().isEmpty()) {
            sb.append("## –û–ø–∏—Å–∞–Ω–∏–µ\n");
            sb.append(property.description()).append("\n\n");
        }

        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
     */
    private String formatPlatformTypeDefinition(PlatformTypeDefinition type) {
        StringBuilder sb = new StringBuilder();

        sb.append(String.format("# üì¶ %s\n\n", type.name()));

        // –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        sb.append("## –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n");
        sb.append(String.format("- **–ú–µ—Ç–æ–¥—ã:** %d\n", type.methods().size()));
        sb.append(String.format("- **–°–≤–æ–π—Å—Ç–≤–∞:** %d\n", type.properties().size()));
        sb.append(String.format("- **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã:** %d\n", type.constructors().size()));
        sb.append("\n");

        // –û–ø–∏—Å–∞–Ω–∏–µ
        if (type.description() != null && !type.description().isEmpty()) {
            sb.append("## –û–ø–∏—Å–∞–Ω–∏–µ\n");
            sb.append(type.description()).append("\n\n");
        }

        // –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤
        if (!type.methods().isEmpty()) {
            sb.append("## –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã\n");
            type.methods().stream()
                    .limit(10)
                    .forEach(method -> sb.append(String.format("- %s\n", method.name())));
            if (type.methods().size() > 10) {
                sb.append(String.format("*... –∏ –µ—â–µ %d –º–µ—Ç–æ–¥–æ–≤*\n", type.methods().size() - 10));
            }
            sb.append("\n");
        }

        // –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å–≤–æ–π—Å—Ç–≤
        if (!type.properties().isEmpty()) {
            sb.append("## –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞\n");
            type.properties().stream()
                    .limit(10)
                    .forEach(property -> sb.append(String.format("- %s (%s)\n", property.name(), property.type())));
            if (type.properties().size() > 10) {
                sb.append(String.format("*... –∏ –µ—â–µ %d —Å–≤–æ–π—Å—Ç–≤*\n", type.properties().size() - 10));
            }
            sb.append("\n");
        }

        sb.append("üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getMembers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n");

        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–¥–µ—Ç–∞–ª—å–Ω–æ–µ)
     */
    private String formatSingleObject(Object obj) {
        StringBuilder sb = new StringBuilder();

        sb.append(String.format("## %s %s\n", getObjectTypeIcon(obj), getObjectName(obj)));
        sb.append("```bsl\n");
        sb.append(getObjectSignature(obj)).append("\n");
        sb.append("```\n");
        sb.append(String.format("*%s*\n\n", getObjectTypeDescription(obj)));

        String description = getObjectDescription(obj);
        if (!description.isEmpty()) {
            sb.append(description).append("\n");
        }

        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     */
    private String formatCompactObject(Object obj, boolean isFirst) {
        StringBuilder sb = new StringBuilder();

        String prefix = isFirst ? "## ‚≠ê " : "## ";
        sb.append(String.format("%s%s\n", prefix, getObjectName(obj)));
        sb.append("```bsl\n");
        sb.append(getObjectSignature(obj)).append("\n");
        sb.append("```\n");

        String relevanceNote = isFirst ? "" : " ‚Ä¢ *–ú–µ–Ω–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ*";
        sb.append(String.format("*%s*%s\n", getObjectTypeDescription(obj), relevanceNote));

        String description = getObjectDescription(obj);
        if (!description.isEmpty()) {
            sb.append("\n").append(truncateDescription(description, 100)).append("\n");
        }

        return sb.toString();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞
     */
    private String getObjectName(Object obj) {
        if (obj instanceof MethodDefinition) {
            return ((MethodDefinition) obj).name();
        } else if (obj instanceof PropertyDefinition) {
            return ((PropertyDefinition) obj).name();
        } else if (obj instanceof PlatformTypeDefinition) {
            return ((PlatformTypeDefinition) obj).name();
        }
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞
     */
    private String getObjectSignature(Object obj) {
        if (obj instanceof MethodDefinition) {
            return buildMethodSignature((MethodDefinition) obj);
        } else if (obj instanceof PropertyDefinition) {
            PropertyDefinition prop = (PropertyDefinition) obj;
            return String.format("%s: %s", prop.name(), prop.type());
        } else if (obj instanceof PlatformTypeDefinition) {
            return "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã";
        }
        return "";
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
     */
    private String getObjectDescription(Object obj) {
        if (obj instanceof MethodDefinition) {
            String desc = ((MethodDefinition) obj).description();
            return desc != null ? desc : "";
        } else if (obj instanceof PropertyDefinition) {
            String desc = ((PropertyDefinition) obj).description();
            return desc != null ? desc : "";
        } else if (obj instanceof PlatformTypeDefinition) {
            String desc = ((PlatformTypeDefinition) obj).description();
            return desc != null ? desc : "";
        }
        return "";
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    private String getObjectTypeIcon(Object obj) {
        if (obj instanceof MethodDefinition) {
            return "üîß";
        } else if (obj instanceof PropertyDefinition) {
            return "üìã";
        } else if (obj instanceof PlatformTypeDefinition) {
            return "üì¶";
        }
        return "‚ùì";
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
     */
    private String getObjectTypeDescription(Object obj) {
        if (obj instanceof MethodDefinition) {
            return "–ú–µ—Ç–æ–¥";
        } else if (obj instanceof PropertyDefinition) {
            return "–°–≤–æ–π—Å—Ç–≤–æ";
        } else if (obj instanceof PlatformTypeDefinition) {
            return "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö";
        }
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø";
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–∞
     */
    private String buildMethodSignature(MethodDefinition method) {
        StringBuilder sb = new StringBuilder();
        sb.append(method.name()).append("(");

        if (method.signature() != null) {
            sb.append(method.signature().stream()
                    .map(param -> param.name() + ": " + param.getType())
                    .collect(Collectors.joining(", ")));
        }

        sb.append(")");

        if (method.getReturnTypeDefinition() != null) {
            sb.append(": ").append(method.getReturnTypeDefinition().getType());
        }

        return sb.toString();
    }

    /**
     * –û–±—Ä–µ–∑–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
     */
    private String truncateSignature(String signature, int maxLength) {
        if (signature.length() <= maxLength) {
            return signature;
        }
        return signature.substring(0, maxLength - 3) + "...";
    }

    /**
     * –û–±—Ä–µ–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
     */
    private String truncateDescription(String description, int maxLength) {
        if (description.length() <= maxLength) {
            return description;
        }
        return description.substring(0, maxLength - 3) + "...";
    }
} 