package ru.alkoleft.context.platform.mcp;

import org.springframework.stereotype.Service;
import ru.alkoleft.context.platform.dto.BaseTypeDefinition;
import ru.alkoleft.context.platform.dto.MethodDefinition;
import ru.alkoleft.context.platform.dto.PropertyDefinition;
import ru.alkoleft.context.platform.mcp.dto.SearchResult;

import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ Markdown –¥–ª—è MCP
 */
@Service
public class MarkdownFormatterService {
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
     */
    public String formatSearchResults(String query, List<SearchResult> results) {
        if (results.isEmpty()) {
            return String.format("‚ùå **–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É:** `%s`\n\n" +
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n" +
                    "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n" +
                    "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å\n" +
                    "- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã", query);
        }
        
        StringBuilder sb = new StringBuilder();
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        sb.append(String.format("# üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \"%s\" (%d –Ω–∞–π–¥–µ–Ω–æ)\n\n", query, results.size()));
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (results.size() == 1) {
            // –û–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            sb.append(formatSingleResult(results.get(0)));
        } else if (results.size() <= 5) {
            // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ
            for (int i = 0; i < results.size(); i++) {
                SearchResult result = results.get(i);
                sb.append(formatCompactResult(result, i == 0));
                if (i < results.size() - 1) {
                    sb.append("\n---\n\n");
                }
            }
        } else {
            // –ú–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–æ–ø-5
            sb.append("## –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n");
            sb.append("| –ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø | –°–∏–≥–Ω–∞—Ç—É—Ä–∞ | –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å |\n");
            sb.append("|----------|-----|-----------|---------------|\n");
            
            for (int i = 0; i < Math.min(5, results.size()); i++) {
                SearchResult result = results.get(i);
                sb.append(String.format("| **%s** | %s | `%s` | %d%% |\n",
                        result.getName(),
                        getTypeIcon(result.getType()),
                        truncateSignature(result.getSignature(), 40),
                        result.getScore()));
            }
            
            if (results.size() > 5) {
                sb.append(String.format("\n*... –∏ –µ—â–µ %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n", results.size() - 5));
            }
            
            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            sb.append("\n---\n\n");
            sb.append("## ‚≠ê –ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n");
            sb.append(formatSingleResult(results.get(0)));
        }
        
        return sb.toString();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
     */
    public String formatDetailedInfo(SearchResult result) {
        StringBuilder sb = new StringBuilder();
        
        sb.append(String.format("# %s %s\n\n", getTypeIcon(result.getType()), result.getName()));
        
        // –°–∏–≥–Ω–∞—Ç—É—Ä–∞
        sb.append("## –°–∏–≥–Ω–∞—Ç—É—Ä–∞\n");
        sb.append("```bsl\n");
        sb.append(result.getSignature()).append("\n");
        sb.append("```\n\n");
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (result.getOriginalObject() instanceof MethodDefinition) {
            formatMethodDetails(sb, (MethodDefinition) result.getOriginalObject());
        } else if (result.getOriginalObject() instanceof PropertyDefinition) {
            formatPropertyDetails(sb, (PropertyDefinition) result.getOriginalObject());
        } else if (result.getOriginalObject() instanceof BaseTypeDefinition) {
            formatTypeDetails(sb, (BaseTypeDefinition) result.getOriginalObject());
        }
        
        // –û–ø–∏—Å–∞–Ω–∏–µ
        if (!result.getDescription().isEmpty()) {
            sb.append("## –û–ø–∏—Å–∞–Ω–∏–µ\n");
            sb.append(result.getDescription()).append("\n\n");
        }
        
        return sb.toString();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–µ—Ç–∞–ª—å–Ω–æ–µ)
     */
    private String formatSingleResult(SearchResult result) {
        StringBuilder sb = new StringBuilder();
        
        sb.append(String.format("## %s %s\n", getTypeIcon(result.getType()), result.getName()));
        sb.append("```bsl\n");
        sb.append(result.getSignature()).append("\n");
        sb.append("```\n");
        sb.append(String.format("*%s* ‚Ä¢ **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: %d%%**\n\n", 
                getTypeDescription(result.getType()), result.getScore()));
        
        if (!result.getDescription().isEmpty()) {
            sb.append(result.getDescription()).append("\n");
        }
        
        return sb.toString();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    private String formatCompactResult(SearchResult result, boolean isFirst) {
        StringBuilder sb = new StringBuilder();
        
        String prefix = isFirst ? "## ‚≠ê " : "## ";
        sb.append(String.format("%s%s\n", prefix, result.getName()));
        sb.append("```bsl\n");
        sb.append(result.getSignature()).append("\n");
        sb.append("```\n");
        
        String relevanceNote = isFirst ? "" : " ‚Ä¢ *–ú–µ–Ω–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ*";
        sb.append(String.format("*%s* ‚Ä¢ **%s**%s\n", 
                getTypeDescription(result.getType()),
                getTypeBadge(result.getType()),
                relevanceNote));
        
        if (!result.getDescription().isEmpty()) {
            sb.append("\n").append(truncateDescription(result.getDescription(), 100)).append("\n");
        }
        
        return sb.toString();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ç–æ–¥–∞
     */
    private void formatMethodDetails(StringBuilder sb, MethodDefinition method) {
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (method.signature() != null && !method.signature().isEmpty()) {
            sb.append("## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã\n");
            method.signature().forEach(param -> {
                sb.append(String.format("- **%s** *(%s)* - %s\n", 
                        param.name(),
                        param.getType(),
                        param.description() != null ? param.description() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"));
            });
            sb.append("\n");
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (method.getReturnTypeDefinition() != null) {
            sb.append("## –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n");
            sb.append(String.format("**%s** - %s\n\n", 
                    method.getReturnTypeDefinition().getType(),
                    method.getReturnTypeDefinition().getDescription() != null ? 
                            method.getReturnTypeDefinition().getDescription() : "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"));
        }
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Å–≤–æ–π—Å—Ç–≤–∞
     */
    private void formatPropertyDetails(StringBuilder sb, PropertyDefinition property) {
        sb.append("## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–π—Å—Ç–≤–µ\n");
        sb.append(String.format("- **–¢–∏–ø:** %s\n", property.type()));
        sb.append(String.format("- **–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ:** %s\n", property.readonly() ? "–î–∞" : "–ù–µ—Ç"));
        sb.append("\n");
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–∏–ø–∞
     */
    private void formatTypeDetails(StringBuilder sb, BaseTypeDefinition type) {
        sb.append("## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ\n");
        sb.append(String.format("- **–ë–∞–∑–æ–≤—ã–π —Ç–∏–ø:** %s\n", type.getClass().getSimpleName()));
        sb.append("\n");
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞
     */
    private String getTypeIcon(String type) {
        switch (type.toLowerCase()) {
            case "method": return "üîß";
            case "property": return "üìã";
            case "type": return "üì¶";
            default: return "‚ùì";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞
     */
    private String getTypeDescription(String type) {
        switch (type.toLowerCase()) {
            case "method": return "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥";
            case "property": return "–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ";
            case "type": return "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö";
            default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø";
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Ç–∏–ø–∞
     */
    private String getTypeBadge(String type) {
        switch (type.toLowerCase()) {
            case "method": return "–ú–µ—Ç–æ–¥—ã";
            case "property": return "–°–≤–æ–π—Å—Ç–≤–∞";
            case "type": return "–¢–∏–ø—ã";
            default: return "–†–∞–∑–Ω–æ–µ";
        }
    }
    
    /**
     * –û–±—Ä–µ–∑–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
     */
    private String truncateSignature(String signature, int maxLength) {
        if (signature.length() <= maxLength) {
            return signature;
        }
        return signature.substring(0, maxLength - 3) + "...";
    }
    
    /**
     * –û–±—Ä–µ–∑–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
     */
    private String truncateDescription(String description, int maxLength) {
        if (description.length() <= maxLength) {
            return description;
        }
        return description.substring(0, maxLength - 3) + "...";
    }
} 